//- script(src="/scripts/jitsiFunctions.js")
script(src="/scripts/dataObj.js?version="+Math.random())
script(src="/scripts/functions.js?version="+Math.random())
script(src="/scripts/socket.io-client/dist/socket.io.js")
script(type="text/javascript").
	var socket = io();
	Vue.prototype.$ = $;
	Vue.prototype.window = window;
	Vue.prototype.JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;
	Vue.prototype.localStorage = localStorage;
	Vue.prototype.dataObj = dataObj;
	Vue.prototype.functions = functions;
	Vue.prototype.socket = socket;
	var vueEl = new Vue({
		el: '#vue',
		data: function() {
			var app = this;
			var apt = this.parseObj(!{JSON.stringify(appTitle)});
			var plyrs = this.parseObj(!{JSON.stringify(players)});
			var guests = this.nullIfEmpty(this.parseObj(!{JSON.stringify(guestlist)}));
			var wt = this.parseObj(!{JSON.stringify(whoseTurn)});
			var ti = this.parseObj(!{JSON.stringify(turnIndex)});
			return dataObj(
				app,
				apt,
				plyrs,
				guests,
				wt,
				ti
			)
		},
		updated: function() {

		},
		beforeDestroy: function() {
			var self = this;
			if (self.timeout && self.timeout !== '') {
				clearTimeout(self.timeout);
			}
			//- if (self.players.indexOf(self.uid) !== 0) {
			//- 	self.leave()
			//- } else {
			//- 	self.unload()
			//- }
		},
		mounted: async function() {
			var self = this;
			self.getBubbleSize();
			window.addEventListener('resize', self.handleResize);
			self.getCheck();
			if (!self.cards || self.cards === '' || self.cards === '[]' || self.cards.length === 0) {
				console.log('no cards')
				self.getCards()
			}
			if (!self.guestlist || self.guestlist === '' || self.guestlist === self.uid) {
				if (localStorage.getItem('__cardgame_guestlist__')) {
					self.guestlist = localStorage.getItem('__cardgame_guestlist__')
				} else {
					
					//- self.guestlistCollapse = false;
				}
			}
			
			//- if (!self.players || self.players.length === 0) {
			//- 	self.getPlayers()
			//- }
			//- self.getPlayers();
			self.startPlay();
			
			socket.on('changed state', function(msg){
				var keys = Object.keys(msg);
				var count = 0;
				keys.forEach(function(k){
					if (k === 'playerhands') {
						Object.keys(msg[k]).forEach(function(p){
							self.playerhands[p] = msg[k][p]
						})
					} else {
						//- if (msg[k] !== '') {
							if (k === 'players') {
								console.log('players vue, players socket')
								console.log(self[k], msg[k])
							}
							self[k] = msg[k]
						//- } else {
						//- 	if (k === 'whoseTurn') {
						//- 		self.whoseTurn = self.players[0];
						//- 		self.turnIndex = 0;
						//- 		count++;
						//- 	}
						//- 	//- console.log(k, self[k], msg[k])
						//- }
					}
				});
				self.ready = self.isReady()
				//- if (count > 0) {
				//- 	self.updateCheck()
				//- }
			})
			//- socket.on('changed players', function(msg) {
			//- 	console.log('changed players. Added')
			//- 	console.log(msg)
			//- 	if (self.players.indexOf(msg) === -1) {
			//- 		if (self.guestlist.split(/\,\s{0,3}/).indexOf(self.uid) === 0) {
			//- 			self.players.push(msg)
			//- 			//- self.updateCheck()
			//- 		}
			//- 	}
			//- })
			//- socket.on('new turn', function(msg) {
			//- 	console.log('next player: ')
			//- 	console.log(msg);
			//- 	self.whoseTurn = msg;
			//- 	self.turnIndex = (self.players.indexOf(msg) === -1 ? 0 : self.players.indexOf(msg))
			//- })
		},
		methods: Object.assign({}, functions)
		
	})