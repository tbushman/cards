script(src="/scripts/jitsiFunctions.js")
script(src="/scripts/dataObj.js?version="+Math.random())
script(src="/scripts/functions.js?version="+Math.random())
script(type="text/javascript").
	Vue.prototype.$ = $;
	Vue.prototype.window = window;
	//- Vue.prototype.marked = marked;
	//- Vue.prototype.moment = moment;
	Vue.prototype.JitsiMeetExternalAPI = window.JitsiMeetExternalAPI;
	Vue.prototype.localStorage = localStorage;
	Vue.prototype.dataObj = dataObj;
	Vue.prototype.functions = functions;
	var vueEl = new Vue({
		el: '#vue',
		data: function() {
			var app = this;
			var inf = this.parseObj(!{JSON.stringify(info)});
			var plyrs = this.parseArr(!{JSON.stringify(players)});
			var plyrh = this.parseObject(!{JSON.stringify(playerhands)});
			var guests = (this.parseObj(!{JSON.stringify(guestlist)}) === '' ? (!localStorage.getItem('__cardgame_guestlist__') ? (!localStorage.getItem('__cardgame_uid__') ? '' : localStorage.getItem('__cardgame_uid__')) : localStorage.getItem('__cardgame_guestlist__') )/*(!this.uid || this.uid === '' ? '' : [this.uid])*/ : this.parseObj(!{JSON.stringify(guestlist)}));
			var bsy = this.parseBool(!{JSON.stringify(busy)});
			var apt = this.parseObj(!{JSON.stringify(appTitle)});
			var crds = this.parseArr(!{JSON.stringify(cards)});
			var dcrd = this.parseArr(!{JSON.stringify(discard)});
			var strg = null;
			var inp = this.parseBool(!{JSON.stringify(inprogress)});
			var td = this.parseArr(!{JSON.stringify(teed)});
			var ut = this.parseArr(!{JSON.stringify(unteed)});
			//- var jq = $;
			//- var st = setTimeout;
			//- var si = setInterval;
			return dataObj(
				app,
				inf,
				plyrs,
				plyrh,
				guests,
				bsy,
				apt,
				crds,
				dcrd,
				strg,
				inp,
				td,
				ut
				//- ,
				//- jq,
				//- st,
				//- si
			)
			//- return {
			//- 	res: window.innerWidth < 600,
			//- 	api: null,
			//- 	info: (this.parseObj(!{JSON.stringify(info)}) === '' ? this.parseObj(!{JSON.stringify(appTitle)}) : this.parseObj(!{JSON.stringify(info)})),
			//- 	players: this.parseObj(!{JSON.stringify(players)}),
			//- 	playerhands: this.parseObject(!{JSON.stringify(playerhands)}),
			//- 	play: this.parseObj(!{JSON.stringify(play)}),
			//- 	busy: this.parseBool(!{JSON.stringify(busy)}),
			//- 	hov: '',
			//- 	timeout: '',
			//- 	interval: '',
			//- 	appTitle: this.parseObj(!{JSON.stringify(appTitle)}),
			//- 	wiw: window.innerWidth,
			//- 	wih: window.innerHeight,
			//- 	bubblesize: null,
			//- 	modal: false,
			//- 	suits: ['heart', 'club', 'diamond', 'spade'],
			//- 	cards: this.parseArr(!{JSON.stringify(cards)}),
			//- 	decka: [],
			//- 	deckb: [],
			//- 	deckc: [],
			//- 	discard: this.parseArr(!{JSON.stringify(discard)}),
			//- 	connection: null,
			//- 	room: null,
			//- 	localTracks: [],
			//- 	remoteTracks: {},
			//- 	isVideo: false,
			//- 	isJoined: false,
			//- 	isFirefox: (!navigator ? true : navigator.userAgent.includes('Firefox')),
			//- 	isSafari: /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || (typeof safari !== 'undefined' && safari.pushNotification)),
			//- 	user: '',
			//- 	hand: [],
			//- 	uid: (!localStorage.getItem('__cardgame_uid__') ? null : localStorage.getItem('__cardgame_uid__')),
			//- 	whoseTurn: '',
			//- 	turnIndex: 0,
			//- 	teed: null,
			//- 	inprogress: this.parseBool(!{JSON.stringify(inprogress)}),
			//- 	invite: [],
			//- 	guestlist: (!localStorage.getItem('__cardgame_guestlist__') ? [localStorage.getItem('__cardgame_uid__')] : localStorage.getItem('__cardgame_guestlist__') ),
			//- 	guestlistCollapse: true,
			//- 	ready: false
			//- }
		},
		updated: function() {

		},
		beforeDestroy: function() {
			var self = this;
			clearTimeout(self.timeout);
			clearInterval(self.interval);
			
			//- self.connection.disconnect()
			if (self.players.indexOf(self.uid) !== 0) {
				self.leave()
			} else {
				self.unload()
			}
		},
		mounted: async function() {
			var self = this;
			self.getBubbleSize();
			window.addEventListener('resize', self.handleResize);
			self.runCheck();
			if (!self.guestlist || self.guestlist === '') {
				self.guestlistCollapse = false;
			}
			if (!self.cards || self.cards === '' || self.cards === '[]' || self.cards.length === 0) {
				console.log('no cards')
				self.getCards()
			
			}
			if (!self.players || self.players.length === 0) {
				self.getPlayers();
			}
			if (!self.inprogress) {
				
			} else {
				if (self.cards && self.cards.length > 0) {
					self.startPlay();
				}
			}
		},
		methods: Object.assign({}, jitsiFunctions, functions)
		
	})