doctype strict
html
	head
		meta(charset="utf-8")
		meta(http-equiv="X-UA-Compatible", content="IE=edge; charset=utf-8")
		title= appTitle
		meta(name="viewport", content="width=device-width, initial-scale=1.0")
		link(href="https://fonts.googleapis.com/css?family=Overpass:200,400,700", rel="stylesheet")
		link(rel="stylesheet", href="/stylesheets/style.css")
		link(href="data:,", rel="icon")
		script(type="text/javascript", src="/scripts/vue.js")
		script(type="text/javascript", src="/scripts/jquery.min.js")
	body
		block header
		block content
		script(type="text/javascript").
			Vue.prototype.$ = $;
			new Vue({
				el: '#vue',
				data: function data() {
					return {
						missingAvatar: false,
						info: null,
						avatar: null,
						thought: this.parseObj(!{JSON.stringify(thought)}),
						thinking: this.parseBool(!{JSON.stringify(thinking)}),
						hov: '',
						timeout: '',
						interval: ''
					}
				},
				updated() {
					
				},
				beforeDestroy() {
					var self = this;
					clearTimeout(self.timeout);
					clearInterval(self.interval);
				},
				mounted() {
					var self = this;
					self.interval = setInterval(() => {
						$.post('/check')
						.then((result) => {
							if (result && result !== undefined) self.thinking = result;
						})
						.catch((err) => {
							if (err) self.thinking = false;
						})
					}, 100)
				},
				methods: {
					parseObj(obj) {
						if (!obj) return '';
						return obj;
					},
					parseBool(bool) {
						if (!bool) return false;
						return bool;
					},
					hovOver(name) {
						this.hov = name;
					},
					hovLeave() {
						this.hov = ''
					},
					async getAvatar(thinking) {
						var self = this;
						await $.post(`/employee/${self.thought.name}`)
						.then((avatar) => {
							self.avatar = avatar;
							self.thinking = (!self.thought ? false : thinking);
							self.missingAvatar = false;
							if (!self.thinking) {
								$.post('/notthinking')
								.then((result) => {
								})
								.catch((err) => {
									console.log(err)
								})
							}
						})
						.catch((err) => console.log(err));
						self.timeout = setTimeout(() => {
							if (!self.avatar) {
								self.avatar = '/img/avatar.svg';
								self.missingAvatar = true;
								clearTimeout(self.timeout);
							}
							self.thinking = (!self.thought ? false : thinking);
						}, 12000)
					},
					getThought() {
						var self = this;
						self.avatar = null;
						self.info = null;
						clearTimeout(self.timeout);
						if (!self.thinking) {
							self.thinking = true;
							$.post('/thought')
							.then((body) => {
								if (!body.thought) {
									return window.location.href = '/reset';
								}
								self.thought = body.thought;
								if (!self.avatar) {
									self.getAvatar(body.thinking)
								}
							})
							.catch((err) => {
								if (err.status === 500) {
									$.post('/notthinking')
									.then((result) => {
										return window.location.href = '/reset';
									})
									.catch((err) => {
										console.log(err)
									})
								}
							})
						}
					}
				}
			})